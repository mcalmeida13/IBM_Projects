## POLYNOMIAL REGRESSION ##

import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
%matplotlib inline

#Downloading data
!wget -O FuelConsumption.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv

#Reading data
df = pd.read_csv("FuelConsumption.csv")

# take a look at the dataset
df.head()

#Looking at some features
cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
cdf.head(9)

#Plotting
plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

#Creating train and test split
msk = np.random.rand(len(df)) < 0.8
train = cdf[msk]
test = cdf[~msk]

#Training the model
from sklearn.preprocessing import PolynomialFeatures #Polynomial regressor
from sklearn import linear_model #Linear repressor
train_x = np.asanyarray(train[['ENGINESIZE']]) #X_train
train_y = np.asanyarray(train[['CO2EMISSIONS']]) #y_train

test_x = np.asanyarray(test[['ENGINESIZE']]) #X_test
test_y = np.asanyarray(test[['CO2EMISSIONS']]) #y_test


poly = PolynomialFeatures(degree=2) #Call regressor of degree 2
train_x_poly = poly.fit_transform(train_x) #Train the model
train_x_poly #whe can understand the polynomial regression as a multilinear regression if we understand that x^2 = x_2, a new feature

#that's why we called linear regression as well

clf = linear_model.LinearRegression()
train_y_ = clf.fit(train_x_poly, train_y) #multilinear regression
# The coefficients
print ('Coefficients: ', clf.coef_)
print ('Intercept: ',clf.intercept_)

#Compare data with regression

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue') #plot the data
XX = np.arange(0.0, 10.0, 0.1) #x in (0,10) and space 0.1
yy = clf.intercept_[0]+ clf.coef_[0][1]*XX+ clf.coef_[0][2]*np.power(XX, 2) #polynomial
plt.plot(XX, yy, '-r' ) #plot the line
plt.xlabel("Engine size")
plt.ylabel("Emission")

#Accuracy

from sklearn.metrics import r2_score

test_x_poly = poly.fit_transform(test_x)
test_y_ = clf.predict(test_x_poly)

print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y_ - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y_ , test_y) )

#Degree 3 prediction

train_x = np.asanyarray(train[['ENGINESIZE']])

train_y = np.asanyarray(train[['CO2EMISSIONS']])

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])


poly3 = PolynomialFeatures(degree=3)
train_x_poly3 = poly3.fit_transform(train_x)
train_x_poly3

clf3 = linear_model.LinearRegression()
train_y_ = clf3.fit(train_x_poly3, train_y)
# The coefficients
print ('Coefficients: ', clf3.coef_)
print ('Intercept: ',clf3.intercept_)

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
XX = np.arange(0.0, 10.0, 0.1)
yy = clf3.intercept_[0]+ clf3.coef_[0][1]*XX+ clf3.coef_[0][2]*np.power(XX, 2) + + clf3.coef_[0][3]*np.power(XX, 3)
plt.plot(XX, yy, '-r' )
plt.xlabel("Engine size")
plt.ylabel("Emission")

test_x_poly3 = poly3.fit_transform(test_x)
test_y3_ = clf3.predict(test_x_poly3)
print("Mean absolute error: %.2f" % np.mean(np.absolute(test_y3_ - test_y)))
print("Residual sum of squares (MSE): %.2f" % np.mean((test_y3_ - test_y) ** 2))
print("R2-score: %.2f" % r2_score(test_y3_ , test_y) )
