## LINEAR REGRESSION ##

import matplotlib.pyplot as plt
import pandas as pd
import pylab as pl
import numpy as np
%matplotlib inline

#Downloading data
!wget -O FuelConsumption.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/FuelConsumptionCo2.csv

#Reading data
df = pd.read_csv("FuelConsumption.csv")

# take a look at the dataset
df.head()

# summarize the data
df.describe()

#Select some features
cdf = df[['ENGINESIZE','CYLINDERS','FUELCONSUMPTION_COMB','CO2EMISSIONS']]
cdf.head(9)

#Plotting
viz = cdf[['CYLINDERS','ENGINESIZE','CO2EMISSIONS','FUELCONSUMPTION_COMB']]
viz.hist()
plt.show()

#Relation Features vs CO2 Emission
plt.scatter(cdf.FUELCONSUMPTION_COMB, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("FUELCONSUMPTION_COMB")
plt.ylabel("Emission")
plt.show()

plt.scatter(cdf.ENGINESIZE, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

plt.scatter(cdf.CYLINDERS, cdf.CO2EMISSIONS,  color='blue')
plt.xlabel("Cylinders")
plt.ylabel("Emission")
plt.show()

#Creating train and test dataset

msk = np.random.rand(len(df)) < 0.8
train = cdf[msk]

#Train data distribution

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue')
plt.xlabel("Engine size")
plt.ylabel("Emission")
plt.show()

#Modeling

from sklearn import linear_model #library
regr = linear_model.LinearRegression() #call the regressor
train_x = np.asanyarray(train[['ENGINESIZE']]) #split your train X
train_y = np.asanyarray(train[['CO2EMISSIONS']])#split your train y
regr.fit (train_x, train_y) #fit the model

# The coefficients
print ('Coefficients: ', regr.coef_)

#Plot the fit line over the data

plt.scatter(train.ENGINESIZE, train.CO2EMISSIONS,  color='blue') #data plot
plt.plot(train_x, regr.coef_[0][0]*train_x + regr.intercept_[0], '-r') #line plot,with the calculated coeff
plt.xlabel("Engine size")
plt.ylabel("Emission")

#Accuracy of the model

from sklearn.metrics import r2_score 

test_x = np.asanyarray(test[['ENGINESIZE']])
test_y = np.asanyarray(test[['CO2EMISSIONS']])
y_pred = regr.predict(test_x) #Predict for X_test

print("Mean absolute error: %.2f" % np.mean(np.absolute(y_pred - test_y))) #Compare the predict and actual using module
print("Residual sum of squares (MSE): %.2f" % np.mean((y_pred - test_y) ** 2)) #Compare the predict and actual usiing MSE
print("R2-score: %.2f" % r2_score(y_pred , test_y) )#Compare the predict and actual using R^2 score
print ('Intercept: ',regr.intercept_)
test = cdf[~msk]
